#!/usr/bin/python3

from argparse import ArgumentParser, RawTextHelpFormatter
from re import finditer

DESCRIPTION="""
Parse a file for valid IPv4 addresses.

The default IP address range:
- 0.0.0.0/8       ("This network")
- 10.0.0.0/8      (Private-Use)
- 127.0.0.0/8     (Loopback)
- 169.254.0.0/16  (Link Local)
- 172.16.0.0/12   (Private-Use)
- 192.168.0.0/16  (Private-Use)
- 255.255.255.255 (Limited Broadcast)

Alternatively, parse a file for all valid IPs in the IANA IPv4 Special-Purpose Address Registry:
https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml
"""

parser = ArgumentParser(
  description=DESCRIPTION,
  formatter_class=RawTextHelpFormatter
)

parser.add_argument(
  "filename",
  help="The path of the file to be parsed.",
  type=str
)

parser.add_argument(
  "-o", "--output",
  help="The path of the file to output the IPs.\nDefault=hosts.txt",
  type=str,
  default="hosts.txt"
)

parser.add_argument(
  "-d", "--delimiter",
  help="The character or string to separate the IPs.\nDefault=\\n",
  type=str,
  default="\n"
)

parser.add_argument(
  "-q", "--quiet",
  help="Do not print the IPs to stdout.",
  action="store_true"
)

parser.add_argument(
  "-n", "--no-file",
  help="Do not write the IPs to a file.",
  action="store_true"
)

parser.add_argument(
  "-i", "--iana",
  help="Use IANA IPv4 Special-Purpose Address Registry instead of default range",
  action="store_true"
)

args = parser.parse_args()



raw_file = args.filename
out_path = args.output
delimiter = args.delimiter
default = not(args.all)
not_quiet = not(args.quiet)
write_file = not(args.no_file)

if default:
  regex = r"(^|(?<=[^0-9]))(172\.(1[6-9]|2[0-9]|3[0-1])(\.(0|2[0-4][0-9]|25[0-5]|1?[0-9]?[0-9])){2}|(169\.254|192\.168)(\.(0|2[0-4][0-9]|25[0-5]|1?[0-9]?[0-9])){2}|(0|10|127)(\.(0|2[0-4][0-9]|25[0-5]|1?[0-9]?[0-9])){3})($|(?![0-9]))"
else:
  regex = r"(^|(?<=[^0-9]))(((172\.(1[6-9]|2[0-9]|3[0-1])|198\.1[8-9]|100\.(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-7]))(\.(0|2[0-4][0-9]|25[0-5]|1?[0-9]?[0-9])){2})|(198\.51\.100|203\.0\.113|192\.(0\.0|0\.2|31\.196|52\.193|88\.99|175\.48))(\.(0|2[0-4][0-9]|25[0-5]|1?[0-9]?[0-9]))|((192\.168|169\.254)(\.(0|2[0-4][0-9]|25[0-5]|1?[0-9]?[0-9])){2})|(192\.(0\.0|0\.2|31\.196|52\.193|88\.99|175\.48))(\.(0|2[0-4][0-9]|25[0-5]|1?[0-9]?[0-9]))|(0|10|127|24[0-9]|25[0-5])(\.(0|2[0-4][0-9]|25[0-5]|1?[0-9]?[0-9])){3})($|(?![0-9]))"



if not_quiet:
  print(f"Using {'default' if default else 'IANA IPv4 Special-Purpose Address Registry'} range:\n")

with open(raw_file) as f:
  raw_data = f.read()
  ip_list = [ip.group() for ip in finditer(regex, raw_data)]
  output_string = delimiter.join(ip_list)

if not_quiet:
  print(output_string)

if write_file:
  with open(out_path,"a") as f:
    f.write(output_string)

    if not_quiet:
      count = len(ip_list)
      print(f"\nWrote {count} IP{'s' if count!=1 else ''} to {out_path}")